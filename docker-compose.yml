version: '3.8'

services:
  # Base de donn√©es PostgreSQL avec pgvector
  postgres:
    image: pgvector/pgvector:pg15
    container_name: jarvis_postgres
    environment:
      POSTGRES_DB: jarvis_mcp
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: jarvis_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jarvis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis -d jarvis_mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: jarvis_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - jarvis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: jarvis_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://jarvis:jarvis_password@postgres:5432/jarvis_mcp
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-development-secret-key}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENVIRONMENT=production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jarvis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: jarvis_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=production
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    depends_on:
      - backend
    networks:
      - jarvis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: jarvis_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - jarvis_network
    restart: unless-stopped

  # Prometheus pour monitoring (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: jarvis_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - jarvis_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana pour visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: jarvis_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - jarvis_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  jarvis_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16