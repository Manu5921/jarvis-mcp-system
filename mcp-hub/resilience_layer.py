"""
üõ°Ô∏è COUCHE DE R√âSILIENCE MCP 
Syst√®me avanc√© de r√©cup√©ration, fallbacks et strat√©gies adaptatives
"""

import asyncio
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime, timedelta
from enum import Enum
import json

logger = logging.getLogger(__name__)

class ErrorType(Enum):
    ENCODING_ERROR = "encoding_error"
    TIMEOUT_ERROR = "timeout_error"
    ACCESS_DENIED = "access_denied"
    FILE_NOT_FOUND = "file_not_found"
    NETWORK_ERROR = "network_error"
    VALIDATION_FAILED = "validation_failed"
    UNKNOWN_ERROR = "unknown_error"

class RecoveryStrategy(Enum):
    RETRY_WITH_FALLBACK = "retry_with_fallback"
    ALTERNATIVE_TOOLS = "alternative_tools"
    PARTIAL_ANALYSIS = "partial_analysis"
    CONTEXT_INFERENCE = "context_inference"
    GRACEFUL_DEGRADATION = "graceful_degradation"

class ResilienceMetrics:
    """M√©triques de performance du syst√®me de r√©silience"""
    
    def __init__(self):
        self.recovery_attempts = 0
        self.successful_recoveries = 0
        self.failed_recoveries = 0
        self.error_patterns = {}
        self.strategy_effectiveness = {}
        self.performance_history = []
    
    def record_recovery_attempt(self, error_type: ErrorType, strategy: RecoveryStrategy, success: bool):
        """Enregistre une tentative de r√©cup√©ration"""
        self.recovery_attempts += 1
        
        if success:
            self.successful_recoveries += 1
        else:
            self.failed_recoveries += 1
        
        # Patterns d'erreurs
        error_key = error_type.value
        if error_key not in self.error_patterns:
            self.error_patterns[error_key] = {"count": 0, "recoveries": 0}
        
        self.error_patterns[error_key]["count"] += 1
        if success:
            self.error_patterns[error_key]["recoveries"] += 1
        
        # Efficacit√© des strat√©gies
        strategy_key = strategy.value
        if strategy_key not in self.strategy_effectiveness:
            self.strategy_effectiveness[strategy_key] = {"attempts": 0, "successes": 0}
        
        self.strategy_effectiveness[strategy_key]["attempts"] += 1
        if success:
            self.strategy_effectiveness[strategy_key]["successes"] += 1
    
    def get_success_rate(self) -> float:
        """Taux de succ√®s global"""
        if self.recovery_attempts == 0:
            return 1.0
        return self.successful_recoveries / self.recovery_attempts
    
    def get_best_strategy_for_error(self, error_type: ErrorType) -> Optional[RecoveryStrategy]:
        """Retourne la meilleure strat√©gie pour un type d'erreur"""
        # Logique simple pour MVP - peut √™tre am√©lior√©e avec ML
        if error_type == ErrorType.ENCODING_ERROR:
            return RecoveryStrategy.RETRY_WITH_FALLBACK
        elif error_type == ErrorType.TIMEOUT_ERROR:
            return RecoveryStrategy.ALTERNATIVE_TOOLS
        elif error_type == ErrorType.ACCESS_DENIED:
            return RecoveryStrategy.CONTEXT_INFERENCE
        elif error_type == ErrorType.FILE_NOT_FOUND:
            return RecoveryStrategy.ALTERNATIVE_TOOLS
        else:
            return RecoveryStrategy.GRACEFUL_DEGRADATION

class MCPResilienceLayer:
    """Couche de r√©silience principale pour le syst√®me MCP"""
    
    def __init__(self):
        self.metrics = ResilienceMetrics()
        self.error_cache = {}  # Cache des erreurs r√©centes
        self.recovery_strategies = self._init_recovery_strategies()
    
    def _init_recovery_strategies(self) -> Dict[RecoveryStrategy, callable]:
        """Initialise les strat√©gies de r√©cup√©ration"""
        return {
            RecoveryStrategy.RETRY_WITH_FALLBACK: self._strategy_retry_with_fallback,
            RecoveryStrategy.ALTERNATIVE_TOOLS: self._strategy_alternative_tools,
            RecoveryStrategy.PARTIAL_ANALYSIS: self._strategy_partial_analysis,
            RecoveryStrategy.CONTEXT_INFERENCE: self._strategy_context_inference,
            RecoveryStrategy.GRACEFUL_DEGRADATION: self._strategy_graceful_degradation
        }
    
    async def handle_tool_failure(self, 
                                 tool_name: str, 
                                 tool_args: Dict[str, Any], 
                                 error: Exception,
                                 context: Dict[str, Any],
                                 mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """
        Point d'entr√©e principal pour g√©rer les √©checs d'outils
        """
        logger.warning(f"üõ°Ô∏è R√âSILIENCE: Gestion √©chec {tool_name} - {str(error)[:100]}")
        
        # 1. Classification de l'erreur
        error_type = self._classify_error(error, tool_name, tool_args)
        
        # 2. S√©lection de la strat√©gie
        strategy = self.metrics.get_best_strategy_for_error(error_type)
        
        # 3. Ex√©cution de la r√©cup√©ration
        recovery_result = await self._execute_recovery_strategy(
            strategy, tool_name, tool_args, error, context, mcp_clients
        )
        
        # 4. Enregistrement des m√©triques
        self.metrics.record_recovery_attempt(error_type, strategy, recovery_result['success'])
        
        return recovery_result
    
    def _classify_error(self, error: Exception, tool_name: str, tool_args: Dict[str, Any]) -> ErrorType:
        """Classifie le type d'erreur pour choisir la strat√©gie appropri√©e"""
        error_str = str(error).lower()
        
        if "encodage" in error_str or "decode" in error_str or "unicode" in error_str:
            return ErrorType.ENCODING_ERROR
        elif "timeout" in error_str or "timed out" in error_str:
            return ErrorType.TIMEOUT_ERROR
        elif "access" in error_str or "permission" in error_str:
            return ErrorType.ACCESS_DENIED
        elif "not found" in error_str or "no such file" in error_str:
            return ErrorType.FILE_NOT_FOUND
        elif "connection" in error_str or "network" in error_str:
            return ErrorType.NETWORK_ERROR
        else:
            return ErrorType.UNKNOWN_ERROR
    
    async def _execute_recovery_strategy(self, 
                                       strategy: RecoveryStrategy,
                                       tool_name: str,
                                       tool_args: Dict[str, Any],
                                       error: Exception,
                                       context: Dict[str, Any],
                                       mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Ex√©cute la strat√©gie de r√©cup√©ration s√©lectionn√©e"""
        
        strategy_func = self.recovery_strategies.get(strategy)
        if not strategy_func:
            return {"success": False, "data": None, "message": f"Strat√©gie {strategy} non impl√©ment√©e"}
        
        try:
            result = await strategy_func(tool_name, tool_args, error, context, mcp_clients)
            return result
        except Exception as strategy_error:
            logger.error(f"üõ°Ô∏è R√âSILIENCE: √âchec strat√©gie {strategy}: {strategy_error}")
            return {"success": False, "data": None, "message": f"Strat√©gie √©chou√©e: {strategy_error}"}
    
    async def _strategy_retry_with_fallback(self, tool_name: str, tool_args: Dict[str, Any], 
                                          error: Exception, context: Dict[str, Any], 
                                          mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Strat√©gie: Retry avec param√®tres modifi√©s"""
        logger.info(f"üõ°Ô∏è R√âSILIENCE: Retry avec fallback pour {tool_name}")
        
        if tool_name == "Read":
            # Pour Read, on a d√©j√† impl√©ment√© le multi-encodage
            # Essayons avec des param√®tres plus permissifs
            modified_args = tool_args.copy()
            modified_args["encoding"] = "latin-1"  # Encodage plus permissif
            
            try:
                result = await mcp_clients["ollama"].call_tool(tool_name, modified_args)
                if result and not result.get("is_error", False):
                    return {
                        "success": True, 
                        "data": result,
                        "message": "üõ°Ô∏è R√©cup√©ration r√©ussie avec encodage fallback"
                    }
            except Exception as retry_error:
                logger.warning(f"üõ°Ô∏è R√âSILIENCE: Retry √©chou√©: {retry_error}")
        
        return {"success": False, "data": None, "message": "Retry avec fallback √©chou√©"}
    
    async def _strategy_alternative_tools(self, tool_name: str, tool_args: Dict[str, Any], 
                                        error: Exception, context: Dict[str, Any], 
                                        mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Strat√©gie: Utiliser des outils alternatifs"""
        logger.info(f"üõ°Ô∏è R√âSILIENCE: Outils alternatifs pour {tool_name}")
        
        if tool_name == "Read":
            # Si Read √©choue, essayer LS du parent + inf√©rence
            file_path = tool_args.get("file_path", "")
            parent_path = "/".join(file_path.split("/")[:-1])
            
            try:
                # LS du r√©pertoire parent
                ls_result = await mcp_clients["ollama"].call_tool("LS", {"path": parent_path})
                if ls_result and not ls_result.get("is_error", False):
                    
                    # Essayer de lire des fichiers similaires
                    filename = file_path.split("/")[-1]
                    file_ext = filename.split(".")[-1] if "." in filename else ""
                    
                    # Inf√©rer le contenu bas√© sur la structure
                    inference = self._infer_content_from_structure(ls_result, file_ext, filename)
                    
                    return {
                        "success": True,
                        "data": {"content": [{"type": "text", "text": inference}]},
                        "message": "üõ°Ô∏è R√©cup√©ration par inf√©rence structurelle"
                    }
            except Exception as alt_error:
                logger.warning(f"üõ°Ô∏è R√âSILIENCE: Outils alternatifs √©chou√©s: {alt_error}")
        
        elif tool_name == "LS":
            # Si LS √©choue, essayer Glob sur le parent
            path = tool_args.get("path", "")
            parent_path = "/".join(path.split("/")[:-1])
            
            try:
                glob_result = await mcp_clients["ollama"].call_tool("Glob", {
                    "pattern": "*",
                    "path": parent_path
                })
                if glob_result and not glob_result.get("is_error", False):
                    return {
                        "success": True,
                        "data": glob_result,
                        "message": "üõ°Ô∏è R√©cup√©ration via Glob alternatif"
                    }
            except Exception as glob_error:
                logger.warning(f"üõ°Ô∏è R√âSILIENCE: Glob alternatif √©chou√©: {glob_error}")
        
        return {"success": False, "data": None, "message": "Aucun outil alternatif disponible"}
    
    async def _strategy_partial_analysis(self, tool_name: str, tool_args: Dict[str, Any], 
                                       error: Exception, context: Dict[str, Any], 
                                       mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Strat√©gie: Analyse partielle avec les donn√©es disponibles"""
        logger.info(f"üõ°Ô∏è R√âSILIENCE: Analyse partielle malgr√© √©chec {tool_name}")
        
        # Rassembler toutes les donn√©es collect√©es jusqu'ici
        partial_data = context.get("collected_data", [])
        
        if partial_data:
            summary = "üõ°Ô∏è ANALYSE PARTIELLE - Donn√©es disponibles:\n\n"
            for i, data in enumerate(partial_data, 1):
                summary += f"{i}. {data['tool']} : {data['summary']}\n"
            
            summary += f"\n‚ö†Ô∏è {tool_name} √©chou√©: {str(error)[:100]}\n"
            summary += "\nüîç RECOMMANDATION: Analyse bas√©e sur les donn√©es partielles collect√©es"
            
            return {
                "success": True,
                "data": {"content": [{"type": "text", "text": summary}]},
                "message": "üõ°Ô∏è Analyse partielle g√©n√©r√©e"
            }
        
        return {"success": False, "data": None, "message": "Pas de donn√©es partielles disponibles"}
    
    async def _strategy_context_inference(self, tool_name: str, tool_args: Dict[str, Any], 
                                        error: Exception, context: Dict[str, Any], 
                                        mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Strat√©gie: Inf√©rence bas√©e sur le contexte"""
        logger.info(f"üõ°Ô∏è R√âSILIENCE: Inf√©rence contextuelle pour {tool_name}")
        
        # Inf√©rer bas√© sur les informations disponibles
        project_path = context.get("target_path", "")
        analysis_type = context.get("analysis_type", "")
        
        inference = f"üõ°Ô∏è INF√âRENCE CONTEXTUELLE:\n\n"
        inference += f"üìÅ Chemin analys√©: {project_path}\n"
        inference += f"üéØ Type d'analyse: {analysis_type}\n"
        inference += f"‚ùå Outil √©chou√©: {tool_name} - {str(error)[:100]}\n\n"
        
        # Inf√©rences bas√©es sur le chemin
        if "restaurant-app" in project_path:
            inference += "üçΩÔ∏è INF√âRENCE: Projet restaurant (Next.js probable)\n"
        elif "design-agent" in project_path:
            inference += "üé® INF√âRENCE: Agent de design (TypeScript + Templates)\n"
        elif "orchestrator" in project_path:
            inference += "üé≠ INF√âRENCE: Orchestrateur (Coordination multi-agents)\n"
        
        inference += "\n‚ö†Ô∏è Cette analyse est bas√©e sur l'inf√©rence contextuelle uniquement"
        
        return {
            "success": True,
            "data": {"content": [{"type": "text", "text": inference}]},
            "message": "üõ°Ô∏è Inf√©rence contextuelle g√©n√©r√©e"
        }
    
    async def _strategy_graceful_degradation(self, tool_name: str, tool_args: Dict[str, Any], 
                                           error: Exception, context: Dict[str, Any], 
                                           mcp_clients: Dict[str, Any]) -> Dict[str, Any]:
        """Strat√©gie: D√©gradation gracieuse avec feedback instructif"""
        logger.info(f"üõ°Ô∏è R√âSILIENCE: D√©gradation gracieuse pour {tool_name}")
        
        graceful_message = f"üõ°Ô∏è D√âGRADATION GRACIEUSE:\n\n"
        graceful_message += f"‚ùå L'outil {tool_name} a √©chou√©: {str(error)[:100]}\n\n"
        graceful_message += f"üîß ACTIONS RECOMMAND√âES:\n"
        
        if tool_name == "Read":
            graceful_message += "‚Ä¢ V√©rifier l'encodage du fichier\n"
            graceful_message += "‚Ä¢ Essayer avec un √©diteur de texte externe\n"
            graceful_message += "‚Ä¢ V√©rifier les permissions d'acc√®s\n"
        elif tool_name == "LS":
            graceful_message += "‚Ä¢ V√©rifier l'existence du r√©pertoire\n" 
            graceful_message += "‚Ä¢ V√©rifier les permissions d'acc√®s\n"
            graceful_message += "‚Ä¢ Essayer avec un chemin parent\n"
        elif tool_name == "Glob":
            graceful_message += "‚Ä¢ Simplifier le pattern de recherche\n"
            graceful_message += "‚Ä¢ V√©rifier la syntaxe du pattern\n"
            graceful_message += "‚Ä¢ Essayer avec LS alternatif\n"
        
        graceful_message += f"\nüí° Le syst√®me continue avec les donn√©es disponibles"
        
        return {
            "success": True,
            "data": {"content": [{"type": "text", "text": graceful_message}]},
            "message": "üõ°Ô∏è D√©gradation gracieuse appliqu√©e"
        }
    
    def _infer_content_from_structure(self, ls_result: Dict[str, Any], file_ext: str, filename: str) -> str:
        """Inf√®re le contenu d'un fichier bas√© sur la structure du r√©pertoire"""
        
        inference = f"üõ°Ô∏è INF√âRENCE STRUCTURELLE pour {filename}:\n\n"
        
        # Analyser le contenu LS
        ls_content = ls_result.get("content", [{}])[0].get("text", "")
        
        if file_ext == "json":
            if "package.json" in filename:
                inference += "üì¶ INF√âRENCE: package.json - Configuration npm/yarn\n"
                inference += "üîç Contenu probable: dependencies, scripts, metadata\n"
            elif "config" in filename:
                inference += "‚öôÔ∏è INF√âRENCE: Fichier de configuration\n"
                inference += "üîç Contenu probable: param√®tres, cl√©s API, environnement\n"
        
        elif file_ext in ["ts", "js"]:
            if "index" in filename:
                inference += "üìö INF√âRENCE: Point d'entr√©e principal\n"
                inference += "üîç Contenu probable: exports, imports, initialisation\n"
            elif "orchestrator" in filename:
                inference += "üé≠ INF√âRENCE: Orchestrateur de coordination\n"
                inference += "üîç Contenu probable: coordination agents, workflows\n"
        
        # Analyser la structure pour plus d'indices
        if "coordination/" in ls_content:
            inference += "\nüìÅ R√©pertoire 'coordination/' d√©tect√©\n"
            inference += "üéØ Suggestion: Syst√®me de coordination multi-agents\n"
        
        if "workflows/" in ls_content:
            inference += "\nüìÅ R√©pertoire 'workflows/' d√©tect√©\n"
            inference += "üéØ Suggestion: Processus automatis√©s et pipelines\n"
        
        inference += f"\n‚ö†Ô∏è Cette inf√©rence est bas√©e sur la structure observ√©e"
        
        return inference
    
    def get_resilience_report(self) -> Dict[str, Any]:
        """G√©n√®re un rapport de performance de la couche de r√©silience"""
        return {
            "success_rate": self.metrics.get_success_rate(),
            "total_recoveries": self.metrics.recovery_attempts,
            "successful_recoveries": self.metrics.successful_recoveries,
            "error_patterns": self.metrics.error_patterns,
            "strategy_effectiveness": self.metrics.strategy_effectiveness,
            "timestamp": datetime.now().isoformat()
        }

# Instance globale
resilience_layer = MCPResilienceLayer()