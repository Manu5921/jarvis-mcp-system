#!/bin/bash

# üöÄ Quick Start Script pour Jarvis MCP
# Script de d√©marrage rapide avec v√©rifications automatiques

set -e

echo "ü§ñ JARVIS MCP - ASSISTANT IA ORCHESTRATEUR"
echo "=========================================="
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

# V√©rifier les pr√©requis
check_prerequisites() {
    print_info "V√©rification des pr√©requis..."
    
    # Python 3.11+
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | grep -oE '[0-9]+\.[0-9]+')
        if [[ $(echo "$PYTHON_VERSION >= 3.11" | bc -l) -eq 1 ]]; then
            print_success "Python $PYTHON_VERSION d√©tect√©"
        else
            print_error "Python 3.11+ requis (d√©tect√©: $PYTHON_VERSION)"
            exit 1
        fi
    else
        print_error "Python 3 non trouv√©"
        exit 1
    fi
    
    # Node.js 18+
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version | grep -oE '[0-9]+' | head -1)
        if [[ $NODE_VERSION -ge 18 ]]; then
            print_success "Node.js v$NODE_VERSION d√©tect√©"
        else
            print_error "Node.js 18+ requis (d√©tect√©: v$NODE_VERSION)"
            exit 1
        fi
    else
        print_error "Node.js non trouv√©"
        exit 1
    fi
    
    # PostgreSQL
    if command -v psql &> /dev/null; then
        print_success "PostgreSQL d√©tect√©"
    else
        print_warning "PostgreSQL non d√©tect√© - installation recommand√©e"
        read -p "Continuer sans PostgreSQL? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Ollama
    if command -v ollama &> /dev/null; then
        print_success "Ollama d√©tect√©"
        
        # V√©rifier si Ollama est en cours d'ex√©cution
        if ollama list &> /dev/null; then
            print_success "Ollama service actif"
            
            # V√©rifier le mod√®le llama3.2:8b
            if ollama list | grep -q "llama3.2:8b"; then
                print_success "Mod√®le llama3.2:8b disponible"
            else
                print_warning "Mod√®le llama3.2:8b non trouv√©"
                read -p "T√©l√©charger maintenant? (Y/n): " -n 1 -r
                echo
                if [[ ! $REPLY =~ ^[Nn]$ ]]; then
                    print_info "T√©l√©chargement du mod√®le llama3.2:8b..."
                    ollama pull llama3.2:8b
                    print_success "Mod√®le t√©l√©charg√© avec succ√®s"
                fi
            fi
        else
            print_warning "Ollama service non actif"
            print_info "D√©marrez Ollama avec: ollama serve"
        fi
    else
        print_warning "Ollama non d√©tect√©"
        print_info "Installez Ollama depuis: https://ollama.com"
        read -p "Continuer sans Ollama? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# Setup environnement backend
setup_backend() {
    print_info "Configuration du backend..."
    
    cd backend
    
    # Cr√©er environnement virtuel
    if [ ! -d "venv" ]; then
        print_info "Cr√©ation de l'environnement virtuel..."
        python3 -m venv venv
    fi
    
    # Activer environnement virtuel
    source venv/bin/activate
    
    # Installer d√©pendances
    print_info "Installation des d√©pendances Python..."
    pip install --upgrade pip
    pip install -r requirements.txt
    
    # Cr√©er fichier .env si inexistant
    if [ ! -f ".env" ]; then
        print_info "Cr√©ation du fichier .env..."
        cat > .env << EOF
DATABASE_URL=postgresql+asyncpg://jarvis:jarvis_password@localhost:5432/jarvis_mcp
SECRET_KEY=$(openssl rand -hex 32)
ANTHROPIC_API_KEY=
OPENAI_API_KEY=
ENVIRONMENT=development
EOF
        print_warning "Configurez vos cl√©s API dans backend/.env"
    fi
    
    cd ..
    print_success "Backend configur√©"
}

# Setup environnement frontend  
setup_frontend() {
    print_info "Configuration du frontend..."
    
    cd frontend
    
    # Installer d√©pendances
    print_info "Installation des d√©pendances Node.js..."
    npm install
    
    # Cr√©er fichier .env.local si inexistant
    if [ ! -f ".env.local" ]; then
        print_info "Cr√©ation du fichier .env.local..."
        cat > .env.local << EOF
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000
EOF
    fi
    
    cd ..
    print_success "Frontend configur√©"
}

# Configurer base de donn√©es
setup_database() {
    print_info "Configuration de la base de donn√©es..."
    
    # V√©rifier si PostgreSQL est install√©
    if ! command -v psql &> /dev/null; then
        print_warning "PostgreSQL non install√© - passage √† SQLite pour le d√©veloppement"
        return
    fi
    
    # Cr√©er base de donn√©es si elle n'existe pas
    if ! psql -lqt | cut -d \| -f 1 | grep -qw jarvis_mcp; then
        print_info "Cr√©ation de la base de donn√©es jarvis_mcp..."
        
        # Commandes de cr√©ation
        sudo -u postgres createdb jarvis_mcp 2>/dev/null || createdb jarvis_mcp
        sudo -u postgres psql -c "CREATE USER jarvis WITH PASSWORD 'jarvis_password';" 2>/dev/null || \
            psql -c "CREATE USER jarvis WITH PASSWORD 'jarvis_password';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE jarvis_mcp TO jarvis;" 2>/dev/null || \
            psql -c "GRANT ALL PRIVILEGES ON DATABASE jarvis_mcp TO jarvis;"
        
        # Activer extension pgvector
        sudo -u postgres psql jarvis_mcp -c "CREATE EXTENSION IF NOT EXISTS vector;" 2>/dev/null || \
            psql jarvis_mcp -c "CREATE EXTENSION IF NOT EXISTS vector;"
        
        print_success "Base de donn√©es cr√©√©e"
    else
        print_success "Base de donn√©es jarvis_mcp existe d√©j√†"
    fi
    
    # Ex√©cuter migrations
    cd backend
    source venv/bin/activate
    print_info "Ex√©cution des migrations..."
    alembic upgrade head
    cd ..
    
    print_success "Base de donn√©es configur√©e"
}

# D√©marrer les services
start_services() {
    print_info "D√©marrage des services..."
    
    # Cr√©er script de d√©marrage
    cat > start_jarvis.sh << 'EOF'
#!/bin/bash

# Couleurs
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üöÄ D√©marrage Jarvis MCP...${NC}"

# Fonction pour tuer les processus en arri√®re-plan √† la sortie
cleanup() {
    echo -e "\n${BLUE}üõë Arr√™t des services Jarvis MCP...${NC}"
    kill $BACKEND_PID $FRONTEND_PID 2>/dev/null
    exit 0
}

trap cleanup SIGINT SIGTERM

# D√©marrer backend
echo -e "${GREEN}‚ñ∂Ô∏è D√©marrage du backend...${NC}"
cd backend
source venv/bin/activate
python main.py &
BACKEND_PID=$!
cd ..

# Attendre que le backend soit pr√™t
sleep 5

# D√©marrer frontend
echo -e "${GREEN}‚ñ∂Ô∏è D√©marrage du frontend...${NC}"
cd frontend
npm run dev &
FRONTEND_PID=$!
cd ..

echo -e "${GREEN}‚úÖ Jarvis MCP d√©marr√© !${NC}"
echo ""
echo "üåê Frontend: http://localhost:3000"
echo "üîß API Backend: http://localhost:8000"
echo "üìö Documentation API: http://localhost:8000/docs"
echo ""
echo "Appuyez sur Ctrl+C pour arr√™ter les services"

# Attendre les processus
wait $BACKEND_PID $FRONTEND_PID
EOF
    
    chmod +x start_jarvis.sh
    print_success "Script de d√©marrage cr√©√©"
    
    print_info "Pour d√©marrer Jarvis MCP:"
    echo ""
    echo -e "${BLUE}  ./start_jarvis.sh${NC}"
    echo ""
}

# Menu principal
main_menu() {
    echo "Que souhaitez-vous faire ?"
    echo ""
    echo "1) Installation compl√®te"
    echo "2) V√©rifier les pr√©requis seulement"
    echo "3) Configuration backend seulement"
    echo "4) Configuration frontend seulement"
    echo "5) Configuration base de donn√©es seulement"
    echo "6) Cr√©er scripts de d√©marrage seulement"
    echo "7) Quitter"
    echo ""
    read -p "Choisissez une option (1-7): " choice
    
    case $choice in
        1)
            check_prerequisites
            setup_backend
            setup_frontend
            setup_database
            start_services
            print_success "Installation compl√®te termin√©e !"
            ;;
        2)
            check_prerequisites
            print_success "V√©rification des pr√©requis termin√©e"
            ;;
        3)
            setup_backend
            ;;
        4)
            setup_frontend
            ;;
        5)
            setup_database
            ;;
        6)
            start_services
            ;;
        7)
            print_info "Au revoir !"
            exit 0
            ;;
        *)
            print_error "Option invalide"
            main_menu
            ;;
    esac
}

# V√©rifier si on est dans le bon r√©pertoire
if [ ! -f "README.md" ] || [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    print_error "Ex√©cutez ce script depuis la racine du projet Jarvis MCP"
    exit 1
fi

# D√©marrer le menu principal
main_menu